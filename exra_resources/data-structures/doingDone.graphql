type householdMeta {
	id: ID,
	active: Boolean!,
	name: String!,
	locale: String!,

	# valueModifiers are used to multiply task points to get a
	# TaskActivity's computed value.
	# e.g.  a task has a points value of 2, the task doer didn't need
	#		prompting but the task was only half completed
	#		the computed value would be 2 * 1.3 * 0.5 = 1.3
	defaultValueModifiers: valueModifiers,
	currency: {
		prefix: String!,
		rounding: Int!,
		# currency value for each point e.g. $1 = 2 points
		pointsToCurrency: Float!
	},
	payMeta: {
		period: Int!, # weeks
		start: DayOfWeek,
	},
	#
	authToken: String!,
	deviceMode: DevicesMode,
	todaysMeta: {
		isSchoolDay: Boolean!,
		isSchoolHoliday: Boolean!,
		isPublicHoliday: Boolean!,
		atHome: Boolean!,
		away: Boolean!,
		start: DateTime,
		end: DateTime,
		date: Date,
		dayOfWeek: DayOfWeek,
		activityIDs: [String]!
	},
	subscribeToSchoolTerms: Boolean!,
	subscribeToPublicHolidays: Boolean!,

	archiveActivityMeta: {
		afterXdays: Int!,
		deleteAfter: Int!
	}
}

type household {
	meta: householdMeta!,
	users: [User],

	# all tasks ever created for the household
	tasks: [Task],
	# all goals ever created for the household
	goals: [Goals],

	activities: [TaskActivity]!,
	archivedActivities: [TaskActivity]!,

	# dollar (or whatever) value of points to be paid out by the household
	accountLedger: [AccountLedgerEntry]!,

	SchoolTerms: [DateBlock]!,
	PublicHolidays: [Date]!,
	errors: [string]!
}

type Device: {
	id: String!,
	name: String!,
	singleUser: Boolean!
}

type user {
	id: ID,
	created: DateTime,
	active: Boolean!,
	name: String!,

	# whether or not a user can approve tasks (usually an adult)
	approver: true,

	# hex colour value to identify user
	colour: String!,
	avatarURL: String!,
	# in Local storage email & password are omitted in favour of
	# keeping them in memory so they're not versioned by PouchDB
	# email: String, # two way hash
	# password: String!, # 1 way hash
	rewards: [DelayedReward],

	# list of simple (non financial) rewards that can be assigned to tasks
	# e.g.	watching a favourite show or playing a game for 10 minutes
	#		on a device
	instantRewards: [Reward],

	points: {
		periodTotal: Float!,
		grandTotal: Float!
	},
	# list of dates when the user will not be available for doing tasks
	absentDates: [Date]!,
	lastPaymentDate: Date!
	showTimeRemaining: Boolean!,
	absentDates: [DateBlock]!
}

# ===================================================================

interface TaskGoal {
	id: ID!,
	created: Date,

	# goals/tasks can be manually made inactive or automatically become
	# inactive if they have a period property and the final occurance
	# (startDate plus duration) has passed.
	active: Boolean!,

	name: String!,

	# You may wish to have multiple variations of the same goal/task
	# e.g.
	#	 one doer needs to perform a goal/task by 7pm and another
	#	 doer needs to perform the same goal/task by 8pm.
	# or
	#	 a goal/task needs to be performed at a different time on
	#	 holidays compared to school term.
	# This allows goal/task creators to easily differentiate between
	# versions while showing a standard name to goal/task doers.
	uniqueName: String!,
	description: String,

	# steps required to complete the task.
	steps: [taskGoalStep!]!,

	# When sharing tasks with community is enabled tags will allow filtering of tasks by type.
	tags: [Tag]!,

	# for some children (and adults) a visual prompt can be very
	# helpful for processing what needs to be done for a particular
	# goal/task this allows you to provide a visaul aid to assist in
	# completion of the task
	visualURL: String,

	# default is FALSE if the goal/task can still get points for
	# partial
	# completion then this should be set to TRUE

	allowPartial: boolean!,

	# if goals/tasks have the same end time priority is used to rank
	# them.
	priority: Int!,

	# Should this task be performed only on specific days of the week
	# default is for all days to be true
	monday: Boolean!,
	tuesday: Boolean!,
	wednesday: Boolean!,
	thursday: Boolean!,
	friday: Boolean!,
	saturday: Boolean!,
	sunday: Boolean!,

	# Required on school term days
	schoolTermMode: SchoolTermMode!,

	# Required on public holidays
	publicHolidays: Boolean!,

	# period handles repeating the task on a
	# regular or irregular basis
	period: TaskPeriod
}


type Task implements TaskGoal { # task interface
	# If not required and not completed tasks will not appear in the
	# responsible user's history
	# If required and not completed, task will be pushed into the
	# responsible user's task history and possibly cause a decrement
	# that user's value tally
	required: boolean!,

	# points gained by completing this task (can be modified by
	# household's valueModifiers)
	# default: 1
	value: Float!,

	# startTime and endTime affect what goals/tasks will be shown (on
	# relevant days) in a user's current active task list
	# i.e. if the current time is between the startTime and the
	# endTime it will be shown
	startTime: Time!,

	# When there are multiple goal/task available at the same time,
	# they will be sorted by end time to ensure the most urgent
	# goals/tasks are completed first.
	# NOTE: if end time is before start time it is assumed that the
	#		task occures across midnight.
	#		e.g. Putting out the rubish bins for emptying
	endTime: Time!,

	# allow completion after normal end time
	extendedEndTime: Time,

	# sometasks can be done either the night before or the next
	# morning e.g. putting out the garbage bins.
	# for these tasks the endTime will end up being before the
	# startTime. overNight provides extra validation to allow
	# endTime to be before startTime.
	# NOTE: startTime must be after midday and
	#		endTime must be before midday
	#		to keep the task scheduler happy.
	overNight: Boolean!,

	# let a task be marked as completed before its
	# designated start time
	canCompleteBefore: boolean!,

	# extra steps to achieve above and beyond.
	extraSteps: [String]!,

	# assigned user changes with each completion period
	rotating: RotatingTurn,

	# index of the user listed in the "responsibles"
	# array currently assigned to task
	assignedTo: Int,

	# list of users who can approve this task.
	# If empty any user with approver: TRUE can approve
	approvers: [User],

	# minimum of two responsibles are required if rotating is TRUE
	# If empty (and rotating is FALSE) task is added to all
	# non-approvers
	responsibles: [User],

	# for some kids (like my son) delayed gratification is not a strong point
	# for these kids it's neccessary to provide a small extrisic reward for
	# completing some (or all) tasks
	instantReward: InstantReward,
	valueModifiers: valueModifiers
}

type Goal implements TaskGoal {
	# goals can only be owned by a single user
	owner: User!,

	# how many times in the current period has the task
	periodAchievementCount: Int!,

	# how many times has this goal been achieved
	totalAchievementCount: Int!,

	# who can see this goal
	visibility: GoalVisibility!,

	# can others clone this goal?
	clonable: Boolean!
}

# 
type taskGoalStep {
	text: String!,
	# URL or SVG for visual
	src: String
}

# ===================================================================


type RotatingTurn {
	# person currently responsible for the task
	assignedTo: [User],

	# because turn taking sometimes needs to be in random order users
	# are added to the turn taken list until every turn taker has had
	# a turn. Then the turn taken list is emptied and it can start
	# again
	turnsTaken: [User]
}

# ===================================================================

interface Recurrance {
	duration: Int!,	# days (NOTE: duration must be less than or equal to interval)
	nextOccuranceStart: Date!,
	nextOccuranceEnd: Date!
	# if finalEndDate is NULL, task never becomes inactive
	finalEndDate: Date,
}

type IntervalRecurrance implements Recurrance {
	interval: Int!,	# number of days from start of last interval
	firstOccurance: Date!
}

type MonthlyOccurance {
	weekDayOfMonth: DayOfWeek!,
	# position of weekday from start (or end of month) [1-5]
	Position: Int!,
	# if FromEnd: TRUE then position is calculated from end of month rather than begining.
	FromEnd: Boolean!, # defalt FALSE
	# Number of days the period runs for.
	duration: Int! # days
}

type MonthlyRecurrance implements Recurrance {
	start: [MonthlyOccurance!]!;
}

type FixedPeriod {
	startDate: Date!,
	duration: Int!, # days
	passed: Boolean!
}

type RandomRecurrance implements Recurrance {
	# startDates are removed from array once their period has passed
	startDates: [FixedPeriod!]!,
	# taken from the endDate of the final FixedPeriod
	finalEndDate: Date!,
}


union TaskPeriod = IntervalRecurrance | MonthlyRecurrance | RandomRecurrance

# ===================================================================


# valueModifiers are used to multiply task points to get a
# TaskActivity's computed value.
# e.g. a task has a points value of 2, the task doer didn't need
#      prompting but the task was only half completed the computed
#      value would be 2 * 1.3 * 0.5 = 1.3
type valueModifiers {
	# completionLevel determins the upper and lower limits of the
	# modifier the approver has a sliding scale where the "Not"
	# value determins the lowest value the 
	completionLevel: {
		# Not (not started) - default: 0
		#	[min: -1,	max: 0]
		# NOTE: A negative "Not" value equates to a fine for not
		#       doing the task
		Not: Float!,
		# Fully completed = 1
		# Outstandingly (completed beyond expectation) default: 1.5
		#	[min: > 1,	max: 5]
		Outstandingly: Float!
	},
	InterventionLevel: {
		# Volunteered - default: 1.3
		#	[min: 1, max: 5] (must be > Prompted)
		Volunteered: Float!,
		# Prompted - default: 1
		#	[min: > 0, max: 5] (must be < Volunteered & > Coerced )
		Prompted: Float!,
		# Coerced - default: 0.7
		#	[min: > 0, max: 5] (must be < Prompted & > Battled )
		Coerced: Float!,
		# Battled - default: 0.4
		#	[min: > 0, max: 1] (must be < Coerced)
		Battled: Float!
	},
	# If a task is completed after the due time but within the
	# extended due time the points value is adjusted by the 
	# Overdue value:
	# et	(extended time) = extendedDueTime - dueTime
	# c		(completion time) = completionTime - dueTime
	# od	(overdue modifier)
	# pv	(task points value)
	# calculated value = pv * ( ((1 - (c / et)) * (1 - od)) + od )
	# e.g.	DueTime:		 8:00am
	#		ExtendedDueTime: 8:20am
	#		CompletionTime:  8:05am
	#		Points:			 1
	#		Overdue:		 0.3
	#		et:				 20
	#		c:				 5
	#		pv:				 0.8
	#		v: 0.8 * (((1 - (5 / 20)) * (1 - 0.3)) + 0.3)
	#		adjusted points: 0.66
	Overdue: Float!,			# default: 0.5		[min: 0, max: 1]
}


# ===================================================================


interface Activity {
	id: ID!, # user ID + task/goal ID + date (YYYY-MM-DD)
	user: User.id!,
	scheduleStatus: scheduledItemStatus!,
	activityStatus: activityStatus,
	# initialised: DateTime!,
	completed: DateTime,
	completionLevel: CompletionLevel!,	# default 0
	doerNotes: String,
	startTime: DateTime!,
	endTime: DateTime!,
	extendedEndTime: DateTime
}


type TaskActivity implements Activity {
	task: Task.id!,
	acknowledged: DateTime,
	acknowledgedBy: User.id,
	acknowledgementNotes: String,
	completionValue: Float,
	interventionLevel: interventionLevel,
	# computedValue = currentValue * completionLevel * interventionLevel
	# (based on task and household modifier values at time of acknowledgement)
	interventionValue: Float,
	computedValue: Float!,				# default 0
	instantReward: InstantReward,
	# the following values are stored immutably in each activity to
	# ensure that updates to the completionLevel and interventionLevel
	# modify the computedValue following the same rules as when the
	# activity was created (i.e. changes over time, to a task or the
	# monetary value of points do not affect the activities created
	# before those changes.)
	currentValue: Float!, # task.value
	currentValueModifiers: valueModifiers!, # clone of task.valueModifiers
	currentPointsToCurrency: Float! # householdMeta.currency.pointsToCurrency
}

type GoalActivity implements Activity {
	goal: Goal.id!
}

# ===================================================================


type DateBlock {
	start: Date!,
	end: Date!
}

# ScheduledItem is a temporary object used for listing tasks & is
# thrown away at the end of the day.
type RenderedScheduledItem {
	id: string!, # user ID + task/goal ID + date (YYYY-MM-DD)
	user: User!,
	taskGoal: TaskGoal!,
	taskGoalType: TaskGoalType!,
	status: scheduledItemStatus!,
	startTime: DateTime!,
	endTime: DateTime!,
	extendedEndTime: DateTime,
	value: Float!,
	pointsToCurrency: Float!,
}

type ActiveTask {
	taskActivityID: String!
}

interface Reward {
	id: ID!,
	name: String!,
	description: String!,
	visualURL: String!,
}

type DelayedReward implements Reward {
	value: Number!, # number of points needed to achieve reward
	expirationDate: DateTime,
	awardedDate: DateTime
}

type InstantReward: implements Reward {
	# List of users who want this reward
	users: []
}

type Tag {
	id: Int!,
	name: String!,
	description: String
}

type AccountLedgerEntry {
	date: DateTime!,
	userID: string!,
	pointsValue: Float!,
	monetaryValue: Float!,
	activityID: string
}

# ===============================================

enum activityScheduledStatus {
	Queued,
	Active,
	Overdue,
	Expired,
	Complete
}
enum activityStatus {
	Not started
	In progress,
	Complete,
	Approved,
	Archived
}

enum CompletionLevel {
	Not started,
	Partially,
	Fully,
	Outstandingly
}
enum interventionLevel {
	# did the task without needing prompting
	Volunteered,
	# needed to be reminded to to do task
	Prompted,
	# needed repeated prompting to do task and possible threats
	# (only available on "Required" tasks)
	Cajoled,
	# refused to do task and argued about it or ignored all efforts
	# get task completed. (only available on "Required" tasks)
	Battled
}
enum DayOfWeek {
	Monday,
	Tuesday,
	Wednesday,
	Thursday,
	Friday,
	Saturday,
	Sunday
}
enum DevicesMode {
	# only one device in the household
	Shared,
	# each approver has their own device but responsibles share a device
	One device for responsibles,
	# everyone has their own device
	Single user
}
enum SchoolTermMode {
	# task is not affected by school term
	# (same as both "School term only" AND "School holidays only")
	Not applicable,
	# only add to list during school term (Only TRUE has an effect)
	School term only,
	# only add to list on school holidays (Only TRUE has an effect)
	School holidays only
}

enum GoalVisibility {
	# only the owner can view this goal and its achievement counts.
	# (equivalent to owner only in Unix)
	Private, 
	# only the owner and household approvers can view this goal and
	# its achievement counts.
	# (equivalent to group in Unix where group is all approvers and
	#  individual doer)
	Approvers,
	# anyone can view this goal and its achievement counts.
	Public
}

enum TaskGoalType {
	Goal,
	Task
}

enum CalendarPeriodType {
	Week of year,
	Week of month,
	Week day of month
}

enum LedgerEntryType {
	Credit,
	Debit,
	Correction
}

# ===============================================

scalar DateTime	# 	ISO 8601 date (stored at UTC then converted at run time e.g. 2004-02-12T15:19:21+00:00)
scalar Date		#	YYYY-MM-DD
scalar Time		#	HH:MM
